name: build

on: [ push, pull_request ]

jobs:
  lint:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install pre-commit hook
        run: |
          pip install pre-commit
          pre-commit install
      - name: Linting
        run: pre-commit run --all-files
      - name: Check docstring
        run: |
          pip install interrogate
          interrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --exclude mmseg/ops --ignore-regex "__repr__" --fail-under 80 mmseg
  build_cpu:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.3.0, 1.5.0, 1.7.0, 1.9.0]
        include:
          - torch: 1.3.0
            torchvision: 0.4.1
          - torch: 1.5.0
            torchvision: 0.6.0
          - torch: 1.7.0
            torchvision: 0.8.1
          - torch: 1.9.0
            torchvision: 0.10.0
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        run: pip install pip --upgrade
      - name: Install Pillow
        if: ${{matrix.torchvision == '0.4.1'}}
        run: pip install Pillow==6.2.2
      - name: Install PyTorch
        run: pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install mmseg dependencies
        run: |
          pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${{matrix.torch}}/index.html
          pip install -r requirements.txt
          python -c 'import mmcv; print(mmcv.__version__)'
      - name: Build and install
        run: rm -rf .eggs && pip install -e .
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmseg -m pytest tests/
          coverage xml
          coverage report -m

  build_cuda:
    runs-on: ubuntu-18.04
    env:
      UBUNTU_VERSION: ubuntu1804
    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.5.0+cu101, 1.7.0+cu101, 1.8.0+cu101, 1.9.0+cu102]
        include:
          - torch: 1.5.0+cu101
            torch_version: torch1.5.0
            torchvision: 0.6.0+cu101
            CUDA: 10.1.105-1
            CUDA_SHORT: 10-1
          - torch: 1.7.0+cu101
            torch_version: torch1.7.0
            torchvision: 0.8.1+cu101
            CUDA: 10.1.105-1
            CUDA_SHORT: 10-1
          - torch: 1.8.0+cu101
            torch_version: torch1.8.0
            torchvision: 0.9.0+cu101
            CUDA: 10.1.105-1
            CUDA_SHORT: 10-1
          - torch: 1.9.0+cu102
            torch_version: torch1.9.0
            torchvision: 0.10.0+cu102
            CUDA: 10.2.89-1
            CUDA_SHORT: 10-2
          - python-version: 3.6
            torch: 1.8.0+cu101
            torch_version: torch1.8.0
            torchvision: 0.9.0+cu101
            CUDA: 10.1.105-1
            CUDA_SHORT: 10-1
          - python-version: 3.8
            torch: 1.8.0+cu101
            torch_version: torch1.8.0
            torchvision: 0.9.0+cu101
            CUDA: 10.1.105-1
            CUDA_SHORT: 10-1
          - python-version: 3.9
            torch: 1.8.0+cu101
            torch_version: torch1.8.0
            torchvision: 0.9.0+cu101
            CUDA: 10.1.105-1
            CUDA_SHORT: 10-1
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        run: pip install pip --upgrade
      - name: Install CUDA
        run: |
          export INSTALLER=cuda-repo-${UBUNTU_VERSION}_${{matrix.CUDA}}_amd64.deb
          wget http://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/${INSTALLER}
          sudo dpkg -i ${INSTALLER}
          wget https://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/7fa2af80.pub
          sudo apt-key add 7fa2af80.pub
          sudo apt update -qq
          sudo apt install -y cuda-${{matrix.CUDA_SHORT}} cuda-cufft-dev-${{matrix.CUDA_SHORT}}
          sudo apt clean
          export CUDA_HOME=/usr/local/cuda-${{matrix.CUDA_SHORT}}
          export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${CUDA_HOME}/include:${LD_LIBRARY_PATH}
          export PATH=${CUDA_HOME}/bin:${PATH}
          sudo apt-get install -y ninja-build
      - name: Install PyTorch
        run: pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install mmseg dependencies
        run: |
          pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/${CUDA_SHORT/-/}/${{matrix.torch_version}}/index.html
          pip install -r requirements.txt
          python -c 'import mmcv; print(mmcv.__version__)'
      - name: Install dependencies for compiling onnx when python=3.9
        run: pip install protobuf && sudo apt-get install libprotobuf-dev protobuf-compiler
        if: ${{matrix.python-version == '3.9'}}
      - name: Build and install
        run: rm -rf .eggs && pip install -e .
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmseg -m pytest tests/
          coverage xml
          coverage report -m
      # Only upload coverage report for python3.7 && pytorch1.5
      - name: Upload coverage to Codecov
        if: ${{matrix.torch == '1.5.0+cu101' && matrix.python-version == '3.7'}}
        uses: codecov/codecov-action@v1.0.14
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false
